["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/disposable/disposeall.js"],"~:js","goog.loadModule(function(exports) {\n  function disposeAll(var_args) {\n    for (let i = 0, len = arguments.length; i < len; ++i) {\n      const disposable = arguments[i];\n      if (goog.isArrayLike(disposable)) {\n        disposeAll.apply(null, disposable);\n      } else {\n        dispose(disposable);\n      }\n    }\n  }\n  \"use strict\";\n  goog.module(\"goog.disposeAll\");\n  goog.module.declareLegacyNamespace();\n  const dispose = goog.require(\"goog.dispose\");\n  exports = disposeAll;\n  return exports;\n});\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The disposeAll method is used to clean up references and\n * resources.\n */\n\ngoog.module('goog.disposeAll');\ngoog.module.declareLegacyNamespace();\n\nconst dispose = goog.require('goog.dispose');\n\n/**\n * Calls `dispose` on each member of the list that supports it. (If the\n * member is an ArrayLike, then `goog.disposeAll()` will be called\n * recursively on each of its members.) If the member is not an object with a\n * `dispose()` method, then it is ignored.\n * @param {...*} var_args The list.\n */\nfunction disposeAll(var_args) {\n  for (let i = 0, len = arguments.length; i < len; ++i) {\n    const disposable = arguments[i];\n    if (goog.isArrayLike(disposable)) {\n      disposeAll.apply(null, disposable);\n    } else {\n      dispose(disposable);\n    }\n  }\n}\nexports = disposeAll;\n","~:compiled-at",1744457528038,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.disposable.disposeall.js\",\n\"lineCount\":19,\n\"mappings\":\"AAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AAuBAA,UAASA,WAAU,CAACC,QAAD,CAAW;AAC5B,SAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMC,SAAUC,CAAAA,MAAhC,EAAwCH,CAAxC,GAA4CC,GAA5C,EAAiD,EAAED,CAAnD,CAAsD;AACpD,YAAMI,aAAaF,SAAA,CAAUF,CAAV,CAAnB;AACA,UAAIK,IAAKC,CAAAA,WAAL,CAAiBF,UAAjB,CAAJ;AACEN,kBAAWS,CAAAA,KAAX,CAAiB,IAAjB,EAAuBH,UAAvB,CAAA;AADF;AAGEI,eAAA,CAAQJ,UAAR,CAAA;AAHF;AAFoD;AAD1B;AAvB9B,cAAA;AAWAC,MAAKI,CAAAA,MAAL,CAAY,iBAAZ,CAAA;AACAJ,MAAKI,CAAAA,MAAOC,CAAAA,sBAAZ,EAAA;AAEA,QAAMF,UAAUH,IAAKM,CAAAA,OAAL,CAAa,cAAb,CAAhB;AAmBAC,SAAA,GAAUd,UAAV;AAjCA,SAAA,OAAA;AAAA,CAAA,CAAA;;\",\n\"sources\":[\"goog/disposable/disposeall.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview The disposeAll method is used to clean up references and\\n * resources.\\n */\\n\\ngoog.module('goog.disposeAll');\\ngoog.module.declareLegacyNamespace();\\n\\nconst dispose = goog.require('goog.dispose');\\n\\n/**\\n * Calls `dispose` on each member of the list that supports it. (If the\\n * member is an ArrayLike, then `goog.disposeAll()` will be called\\n * recursively on each of its members.) If the member is not an object with a\\n * `dispose()` method, then it is ignored.\\n * @param {...*} var_args The list.\\n */\\nfunction disposeAll(var_args) {\\n  for (let i = 0, len = arguments.length; i < len; ++i) {\\n    const disposable = arguments[i];\\n    if (goog.isArrayLike(disposable)) {\\n      disposeAll.apply(null, disposable);\\n    } else {\\n      dispose(disposable);\\n    }\\n  }\\n}\\nexports = disposeAll;\\n\"],\n\"names\":[\"disposeAll\",\"var_args\",\"i\",\"len\",\"arguments\",\"length\",\"disposable\",\"goog\",\"isArrayLike\",\"apply\",\"dispose\",\"module\",\"declareLegacyNamespace\",\"require\",\"exports\"]\n}\n"]