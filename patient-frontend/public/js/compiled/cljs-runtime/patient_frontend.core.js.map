{"version":3,"sources":["patient_frontend/core.cljs"],"mappings":"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","names":["patient-frontend.core/api-url","js/patient-frontend","js/patient-frontend.core","js/patient-frontend.core.patients","patient-frontend.core/patients","reagent.core.atom","js/patient-frontend.core.current-patient","patient-frontend.core/current-patient","js/patient-frontend.core.loading?","patient-frontend.core/loading?","js/patient-frontend.core.error-msg","patient-frontend.core/error-msg","patient-frontend.core/fetch-patients","cljs.core/reset!","cljs_http.client.get","response","cljs.core._EQ_","patient-frontend.core/create-patient","patient-data","cljs_http.client.post","patient-frontend.core/update-patient","patient-id","cljs_http.client.put","patient-frontend.core/delete-patient","cljs_http.client.delete$","patient-frontend.core/patient-list","cljs.core/deref","patients-data","cljs.core/empty?","iter__5480__auto__","s__23055","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__23057","cljs.core/chunk-buffer","i__23056","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23054","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","patient","patient-frontend.core/patient-form","name","gender","birth_date","address","oms_number","p1__23058#","p1__23059#","p1__23060#","p1__23061#","p1__23062#","e","patient-frontend.core/app","patient-frontend.core/init","rdom/render","js/document","patient-frontend.core/main","cljs.core/chunk-first"],"sourcesContent":["(ns patient-frontend.core\r\n  (:require\r\n    [cljs-http.client :as http]\r\n    [cljs.core.async :refer [go <!]]\r\n    [reagent.core :as reagent]\r\n    [reagent.dom :as dom]))\r\n\r\n(def api-url \"http://localhost:3000/patients\")\r\n\r\n;; Define state for patients, current patient, loading, and error messages\r\n(defonce patients (reagent/atom []))\r\n(defonce current-patient (reagent/atom nil))\r\n(defonce loading? (reagent/atom false))\r\n(defonce error-msg (reagent/atom nil))\r\n\r\n;; Fetch the list of patients from the backend API\r\n(defn fetch-patients []\r\n      (reset! loading? true)\r\n      (reset! error-msg nil)\r\n      (http/get api-url\r\n                {:with-credentials? false}\r\n                (fn [response]\r\n                    (reset! loading? false)\r\n                    (if (= 200 (:status response))\r\n                      (reset! patients (:body response))\r\n                      (reset! error-msg \"Failed to fetch patients\")))))\r\n\r\n;; Function to handle patient creation\r\n(defn create-patient [patient-data]\r\n      (http/post api-url\r\n                 {:json-params patient-data}\r\n                 (fn [response]\r\n                     (if (= 201 (:status response))\r\n                       (do\r\n                         (fetch-patients)\r\n                         (reset! current-patient nil))\r\n                       (reset! error-msg \"Failed to create patient\")))))\r\n\r\n;; Function to handle patient update\r\n(defn update-patient [patient-id patient-data]\r\n      (http/put (str api-url \"/\" patient-id)\r\n                {:json-params patient-data}\r\n                (fn [response]\r\n                    (if (= 200 (:status response))\r\n                      (do\r\n                        (fetch-patients)\r\n                        (reset! current-patient nil))\r\n                      (reset! error-msg \"Failed to update patient\")))))\r\n\r\n;; Function to handle patient deletion\r\n(defn delete-patient [patient-id]\r\n      (http/delete (str api-url \"/\" patient-id)\r\n                   (fn [response]\r\n                       (if (= 200 (:status response))\r\n                         (fetch-patients)\r\n                         (reset! error-msg \"Failed to delete patient\")))))\r\n\r\n;; Display the list of patients\r\n(defn patient-list []\r\n      (let [patients-data @patients]\r\n           [:div\r\n            [:h2 \"Patient List\"]\r\n            (if @loading?\r\n              [:p \"Loading...\"]\r\n              (if @error-msg\r\n                [:p {:style {:color \"red\"}} @error-msg]\r\n                (if (empty? patients-data)\r\n                  [:p \"No patients found.\"]\r\n                  [:ul\r\n                   (for [patient patients-data]\r\n                        ^{:key (:patients/id patient)}\r\n                        [:li\r\n                         (:patients/full_name patient)\r\n                         [:button {:on-click #(reset! current-patient patient)} \"Edit\"]\r\n                         [:button {:on-click #(delete-patient (:patients/id patient))} \"Delete\"]])])))]))\r\n\r\n;; Form for creating or editing a patient\r\n(defn patient-form []\r\n      (let [patient @current-patient\r\n            name (reagent/atom (:patients/full_name patient))\r\n            gender (reagent/atom (:patients/gender patient))\r\n            birth_date (reagent/atom (:patients/birth_date patient))\r\n            address (reagent/atom (:patients/address patient))\r\n            oms_number (reagent/atom (:patients/oms_number patient))]\r\n           (fn []\r\n               [:div\r\n                [:h2 (if patient \"Edit Patient\" \"Add Patient\")]\r\n                [:form\r\n                 {:on-submit (fn [e]\r\n                                 (.preventDefault e)\r\n                                 (let [patient-data {:patients/full_name @name\r\n                                                     :patients/gender @gender\r\n                                                     :patients/birth_date @birth_date\r\n                                                     :patients/address @address\r\n                                                     :patients/oms_number @oms_number}]\r\n                                      (if patient\r\n                                        (update-patient (:patients/id patient) patient-data)\r\n                                        (create-patient patient-data))))}\r\n                 [:div\r\n                  [:label \"Full Name: \"]\r\n                  [:input {:type \"text\" :value @name :on-change #(reset! name (-> % .-target .-value))}]]\r\n                 [:div\r\n                  [:label \"Gender: \"]\r\n                  [:input {:type \"text\" :value @gender :on-change #(reset! gender (-> % .-target .-value))}]]\r\n                 [:div\r\n                  [:label \"Birth Date: \"]\r\n                  [:input {:type \"date\" :value @birth_date :on-change #(reset! birth_date (-> % .-target .-value))}]]\r\n                 [:div\r\n                  [:label \"Address: \"]\r\n                  [:input {:type \"text\" :value @address :on-change #(reset! address (-> % .-target .-value))}]]\r\n                 [:div\r\n                  [:label \"OMS Number: \"]\r\n                  [:input {:type \"text\" :value @oms_number :on-change #(reset! oms_number (-> % .-target .-value))}]]\r\n                 [:button {:type \"submit\"} (if patient \"Update\" \"Create\")]]])))\r\n\r\n      ;; Main app that combines the patient list and form\r\n      (defn app []\r\n            [:div\r\n             [:h1 \"Patient Management\"]\r\n             [patient-form]\r\n             [patient-list]])\r\n\r\n      ;; Initialize the app by fetching patients and rendering it to the DOM\r\n(defn ^:export init []\r\n      (fetch-patients)\r\n      (rdom/render [app]\r\n                   (.getElementById js/document \"app\")))\r\n\r\n;; Mount the application\r\n(defn ^:export main []\r\n      (init))\r\n\r\n;; Call main when the page loads\r\n(main)\r\n\r\n\r\n"]}