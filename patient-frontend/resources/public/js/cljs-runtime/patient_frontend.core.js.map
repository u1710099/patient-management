{"version":3,"sources":["patient_frontend/core.cljs"],"mappings":";AAMA,GAAA,QAAAA,6CAAAC,kDAAAC;AAAA;AAAA,AAAA,AAASC,kCAAU,gDAAA,2CAAA,4DAAA,vJAACC;;AAGpB,2CAAA,3CAAMC;AAAN,AACM,0DAAA,mFAAA,2CAAA,jLAACC,4OACc,WAAKC;AAAL,AACI,6DAAA,2CAAA,jGAACC,sBAAOL,uIAAqB,AAAA,oFAAOI;GAFvD,uEAGqB,WAAKE;AAAL,AACI,qBAAA,dAACC,0CAA6CD;;;AAG7E,uCAAA,vCAAME,sFAAgBC;AAAtB,AACM,2DAAA,mFAAA,2CAAA,gEAAA,lPAACC,0OACcD,mEACC,WAAKL;AAAL,AACI,mBAAA,ZAACO,gCAAmCP;GAHxD,uEAIsB,WAAKE;AAAL,AACI,qBAAA,dAACC,yCAA4CD;;;AAG7E,uCAAA,vCAAMM,sFAAgBH;AAAtB,AACM,0DAAA,mFAAA,2CAAA,gEAAA,jPAACI,yOACaJ,mEACC,WAAKL;AAAL,AACI,mBAAA,ZAACO,gCAAmCP;;;AAG7D,uCAAA,vCAAMU,sFAAgBC;AAAtB,AACM,6DAAA,mFAAA,2CAAA,wDAAA,2CAAA,6DAAA,pVAACC,yUACqBD,sEACJ,WAAKX;AAAL,AACI,mBAAA,ZAACO,gCAAmCP;;;AAGhE,qCAAA,rCAAMa;AAAN,AAAA,0FAAA,mDAAA,mFAAA,iDAAA,uBAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAG4B,OAACf;WAH7B,6BAIO,iBAAAgB,qBAAA,2DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAy6E4C,AAAAmB,sBAAAxB;IAz6E5CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,cAAA,AAAAK,eAAAN,gBAAAK,zCAAMpB;AAAN,AAAA,AAAA,AAAAsB,uBAAAJ,SAAA,oBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,iBAAA,2DAAA,OAAA,sEAAA,uBAAA,mFAAA,4JAAA,mFAAA,yDAAA,2CAAA,6DAAA,lWAGU,AAAA,6FAAYlB;;AAHtB,AAI2B,OAACK,qCAAe,AAAA,gFAAKL;;SAJhD,yBAAA,2CAAA,oDACY,AAAA,gFAAKA;;AADjB,eAAA,CAAAoB,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,iDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,cAAA,AAAAS,gBAAAjB,1BAAMV;AAAN,AAAA,OAAA4B,eAAA,oBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,iBAAA,2DAAA,OAAA,sEAAA,uBAAA,mFAAA,4JAAA,mFAAA,yDAAA,2CAAA,6DAAA,lWAGU,AAAA,6FAAY5B;;AAHtB,AAI2B,OAACK,qCAAe,AAAA,gFAAKL;;SAJhD,yBAAA,2CAAA,sJAAA,AAAAyB,iDAAA,AAAAI,eAAAnB,lKACY,AAAA,gFAAKV;;;AADjB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAS,mBAAc,AAAA,0FAAA,AAAAqB,gBAAYvC;;;AAOjC,4BAAA,5BAAMwC;AAAN,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,6BAAA,mFAGQvB;;AAGR,mBAAA,nBAACwB,sGAAoBD,kCAAK,wBAAA,xBAAiBE","names":["js/patient-frontend","js/patient-frontend.core","js/patient-frontend.core.app-state","patient-frontend.core/app-state","reagent.core.atom","patient-frontend.core/fetch-all-patients","ajax.core.GET","response","cljs.core/reset!","error","js/console.error","patient-frontend.core/create-patient","patient","ajax.core.POST","js/console.log","patient-frontend.core/update-patient","ajax.core.PUT","patient-frontend.core/delete-patient","id","ajax.core.DELETE","patient-frontend.core/patient-list","iter__5480__auto__","s__12032","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__12035","cljs.core/chunk-buffer","i__12033","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12031","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/deref","patient-frontend.core/app","reagent.dom/render","js/document","cljs.core/chunk-first"],"sourcesContent":["(ns patient-frontend.core\r\n  (:require [reagent.core :as r]\r\n            [cljs-http.client :as http]\r\n            [ajax.core :refer [GET POST PUT DELETE]]))\r\n\r\n;; Global atom to store patient data\r\n(defonce app-state (r/atom {:patients []}))\r\n\r\n;; Function to fetch all patients\r\n(defn fetch-all-patients []\r\n      (GET \"http://localhost:3000/patients\"\r\n           {:handler (fn [response]\r\n                         (reset! app-state {:patients (:body response)}))  ;; Update state with patients\r\n            :error-handler (fn [error]\r\n                               (js/console.error \"Error fetching patients: \" error))}))\r\n\r\n;; Function to create a new patient\r\n(defn create-patient [patient]\r\n      (POST \"http://localhost:3000/patients\"\r\n            {:params patient\r\n             :handler (fn [response]\r\n                          (js/console.log \"Patient created: \" response))  ;; Handle successful creation\r\n             :error-handler (fn [error]\r\n                                (js/console.error \"Error creating patient: \" error))}))\r\n\r\n;; Function to update an existing patient\r\n(defn update-patient [patient]\r\n      (PUT \"http://localhost:3000/patients\"\r\n           {:params patient\r\n            :handler (fn [response]\r\n                         (js/console.log \"Patient updated: \" response))}))\r\n\r\n;; Function to delete a patient\r\n(defn delete-patient [id]\r\n      (DELETE \"http://localhost:3000/patients\"\r\n              {:params {:id id}\r\n               :handler (fn [response]\r\n                            (js/console.log \"Patient deleted: \" response))}))\r\n\r\n;; Reagent component to display patients\r\n(defn patient-list []\r\n      [:div\r\n       [:h2 \"Patient List\"]\r\n       [:button {:on-click #(fetch-all-patients)} \"Fetch All Patients\"]\r\n       (for [patient (:patients @app-state)]\r\n            ^{:key (:id patient)}\r\n            [:div {:style {:border \"1px solid #ccc\" :padding \"10px\" :margin-bottom \"10px\"}}\r\n             [:p (:full_name patient)]\r\n             [:button {:on-click #(delete-patient (:id patient))} \"Delete\"]])])\r\n\r\n;; Root component\r\n(defn app []\r\n      [:div\r\n       [:h1 \"Patient Management\"]\r\n       [patient-list]])\r\n\r\n;; Render the app to the HTML element with id \"app\"\r\n(reagent.dom/render [app] (.getElementById js/document \"app\"))\r\n"]}