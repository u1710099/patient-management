{"version":3,"sources":["patient_frontend/core.cljs"],"mappings":"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","names":["patient-frontend.core/api-url","patient-frontend.core/success-status","patient-frontend.core/form-fields","js/patient-frontend","js/patient-frontend.core","js/patient-frontend.core.root","patient-frontend.core/root","reagent.dom.client/create-root","js/document","js/patient-frontend.core.patients","patient-frontend.core/patients","reagent.core.atom","js/patient-frontend.core.current-patient","patient-frontend.core/current-patient","js/patient-frontend.core.loading?","patient-frontend.core/loading?","js/patient-frontend.core.error-msg","patient-frontend.core/error-msg","js/patient-frontend.core.form-data","patient-frontend.core/form-data","patient-frontend.core/handle-api-response","response","success-fn","error-message","cljs.core/reset!","G__23274","patient-frontend.core/fetch-patients","p1__23275#","cljs_http.client.get","patient-frontend.core/create-patient","patient-data","p1__23276#","cljs_http.client.post","_","patient-frontend.core/update-patient","patient-id","p1__23277#","cljs_http.client.put","patient-frontend.core/delete-patient","p1__23278#","cljs_http.client.delete$","patient-frontend.core/patient-list","cljs.core/deref","patients-data","cljs.core/empty?","cljs.core.doall","iter__5480__auto__","s__23280","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__23282","cljs.core/chunk-buffer","i__23281","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23279","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","patient","p__23284","map__23285","cljs.core/--destructure-map","cljs.core.get","p1__23283#","patient-frontend.core/form-input","id","label","type","cljs.core.swap_BANG_","cljs.core/assoc","patient-frontend.core/patient-form","e","s__23287","b__23289","i__23288","iter__23286","field","patient-frontend.core/app","patient-frontend.core/init","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns patient-frontend.core\r\n  (:require\r\n    [cljs-http.client :as http]\r\n    [cljs.core.async :refer [go <!]]\r\n    [reagent.core :as reagent]\r\n    [reagent.dom.client :as rdc]))\r\n\r\n(def api-url \"http://localhost:3000/patients\")\r\n(def success-status #{200 201})\r\n(def form-fields\r\n  [{:id :patients/full_name :label \"Full Name\" :type \"text\"}\r\n   {:id :patients/gender :label \"Gender\" :type \"text\"}\r\n   {:id :patients/birth_date :label \"Birth Date\" :type \"date\"}\r\n   {:id :patients/address :label \"Address\" :type \"text\"}\r\n   {:id :patients/oms_number :label \"OMS Number\" :type \"text\"}])\r\n\r\n(defonce root (rdc/create-root (.getElementById js/document \"app\")))\r\n(defonce patients (reagent/atom []))\r\n(defonce current-patient (reagent/atom nil))\r\n(defonce loading? (reagent/atom false))\r\n(defonce error-msg (reagent/atom nil))\r\n(defonce form-data (reagent/atom {}))\r\n\r\n(defn handle-api-response [response success-fn error-message]\r\n      (reset! loading? false)\r\n      (if (success-status (:status response))\r\n        (success-fn response)\r\n        (reset! error-msg error-message)))\r\n\r\n(defn fetch-patients []\r\n      (reset! loading? true)\r\n      (reset! error-msg nil)\r\n      (http/get api-url\r\n                {:with-credentials? false}\r\n                #(handle-api-response %\r\n                                      (fn [response] (reset! patients (:body response)))\r\n                                      \"Failed to fetch patients\")))\r\n\r\n(defn create-patient [patient-data]\r\n      (http/post api-url\r\n                 {:json-params patient-data}\r\n                 #(handle-api-response %\r\n                                       (fn [_]\r\n                                           (fetch-patients)\r\n                                           (reset! current-patient nil)\r\n                                           (reset! form-data {}))\r\n                                       \"Failed to create patient\")))\r\n\r\n(defn update-patient [patient-id patient-data]\r\n      (http/put (str api-url \"/\" patient-id)\r\n                {:json-params patient-data}\r\n                #(handle-api-response %\r\n                                      (fn [_]\r\n                                          (fetch-patients)\r\n                                          (reset! current-patient nil)\r\n                                          (reset! form-data {}))\r\n                                      \"Failed to update patient\")))\r\n\r\n(defn delete-patient [patient-id]\r\n      (http/delete (str api-url \"/\" patient-id)\r\n                   #(handle-api-response %\r\n                                         (fn [_] (fetch-patients))\r\n                                         \"Failed to delete patient\")))\r\n\r\n(defn patient-list []\r\n      (let [patients-data @patients]\r\n           [:div\r\n            [:h2 \"Patient List\"]\r\n            (cond\r\n              @loading? [:p \"Loading...\"]\r\n              @error-msg [:p {:style {:color \"red\"}} @error-msg]\r\n              (empty? patients-data) [:p \"No patients found.\"]\r\n              :else\r\n              [:ul\r\n               (doall\r\n                 (for [patient patients-data]\r\n                      ^{:key (:patients/id patient)}\r\n                      [:li\r\n                       (:patients/full_name patient)\r\n                       [:button {:on-click #(do\r\n                                              (reset! current-patient patient)\r\n                                              (reset! form-data patient))} \"Edit\"]\r\n                       [:button {:on-click #(delete-patient (:patients/id patient))} \"Delete\"]]))])]))\r\n\r\n(defn form-input [{:keys [id label type]}]\r\n      [:div\r\n       [:label (str label \": \")]\r\n       [:input {:type type\r\n                :value (get @form-data id \"\")\r\n                :on-change #(swap! form-data assoc id (.. % -target -value))}]])\r\n\r\n(defn patient-form []\r\n      (let [patient @current-patient]\r\n           [:div\r\n            [:h2 (if patient \"Edit Patient\" \"Add Patient\")]\r\n            [:form\r\n             {:on-submit\r\n              (fn [e]\r\n                  (.preventDefault e)\r\n                  (if patient\r\n                    (update-patient (:patients/id patient) @form-data)\r\n                    (create-patient @form-data)))}\r\n             (doall\r\n               (for [field form-fields]\r\n                    ^{:key (:id field)}\r\n                    [form-input field]))\r\n             [:button {:type \"submit\"} (if patient \"Update\" \"Create\")]]]))\r\n\r\n(defn app []\r\n      [:div\r\n       [:h1 \"Patient Management\"]\r\n       [patient-form]\r\n       [patient-list]])\r\n\r\n(defn init []\r\n      (fetch-patients)\r\n      (rdc/render root [app]))\r\n\r\n(init)"]}